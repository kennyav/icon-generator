import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Button from "~/component/Button";
import FormGroup from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";
import Image from "next/image";
import { number } from "zod";

const colors = [
   "red",
   "orange",
   "yellow",
   "green",
   "teal",
   "blue",
   "indigo",
   "purple",
   "pink",
   "gray",
   "white",
   "black"
]

const styles = [
   "monochromatic",
   "metallic"
]

const GeneratePage: NextPage = () => {
   const [form, setForm] = useState({
      person: [],
      location: "",
      title: "",
   });
   // State to hold the selected number
   const [selectedNumber, setSelectedNumber] = useState<number>(0);
   const numberArray = Array.from({ length: selectedNumber }, (_, index) => index + 1);

   // Array of numbers for the dropdown
   const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

   const [imagesUrl, setImagesUrl] = useState('');

   const generatePixarImage = api.generatePixar.generatePixarImage.useMutation({
      // onSuccess(data) {
      //    if (!data.imageUrl) return;
      //    setImagesUrl(data.imageUrl);
      // }
      onSuccess(data) {
         setImagesUrl(data.imageUrl);
      },
      onError(error) {
         console.log(error.message)
         if (error.message === "UNAUTHORIZED") {
            alert("You need to be signed in to sumbit an icon request")
         } else {
            alert("You do not have any credits remaining")
         }
      },
   });

   function handleFormSubmit(e: React.FormEvent) {
      e.preventDefault();
      generatePixarImage.mutate(form);
   }

   function updateForm(key: string) {
      return function (e: React.ChangeEvent<HTMLInputElement>) {
         setForm(prev => ({
            ...prev,
            [key]: e.target.value,
         }))
      }
   }

   const updatePersonForm = (fieldName: string, index: number) => (event: React.ChangeEvent<HTMLInputElement>) => {
      const updatedPerson: string[]  = [...form.person];
      updatedPerson[index] = event.target.value;

      setForm({
         ...form,
         [fieldName]: updatedPerson,
      });
   };

   // Event handler for changing the selected number
   const handleNumberChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
      const newSelectedNumber = parseInt(event.target.value, 10);
      setSelectedNumber(newSelectedNumber);
   };


   return (
      <>
         <Head>
            <title>Generate Icons</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <main className="container mx-auto mt-24 flex min-h-screen flex-col gap-4 px-4">
            <h1 className="text-5xl font-extrabold tracking-tight text-dark dark:text-white sm:text-[5rem] mr-2">
               Generate your <span className="text-[hsl(212,74%,58%)]">Icons</span>
            </h1>
            <p className="text-2xl mb-12">Fill out the forms below to start generating your icons</p>
            <form
               className="flex flex-col gap-4 mb-12"
               onSubmit={handleFormSubmit}
            >
               <h2 className="text-xl">Step 1: Number of People</h2>
               <FormGroup className="mb-12">
                  <label>Input number here</label>
                  <select value={selectedNumber || ''} onChange={handleNumberChange}>
                     <option value="" disabled className="text-black">Select a number</option>
                     {numbers.map((number) => (
                        <option key={number} value={number}>
                           {number}
                        </option>
                     ))}
                  </select>
               </FormGroup>


               <h2 className="text-xl">Step 2: Description of People</h2>
               <FormGroup className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 grid-flow-row gap-4 mb-12">
                  {numberArray.map((number) => (
                     <div key={number}>
                        <label>Person {number}</label>
                        <Input value={form.person[number - 1]}
                           onChange={updatePersonForm("person", number - 1)}></Input>
                     </div>
                  ))}
               </FormGroup>

               <h2 className="text-xl">Step 3: Describe the location</h2>
               <FormGroup className="mb-12">
                  <label>Location Description</label>
                  <Input
                     value={form.location}
                     onChange={updateForm("location")} />
               </FormGroup>

               <h2 className="text-xl">Step 4: Title of the pixar poster</h2>
               <FormGroup className="mb-12">
                  <label>Title</label>
                  <Input
                     value={form.title}
                     onChange={updateForm("title")} />
               </FormGroup>

               <Button
                  type="submit"
                  variant="primary"
                  disabled={generatePixarImage.isLoading}
                  isLoading={generatePixarImage.isLoading}>
                  Submit
               </Button>
            </form>
            {imagesUrl && (
               <>
                  <h2 className="text-xl">Your Icons</h2>
                  <section className="grid grid-cols-4 gap-4 mb-24">
                     {/* {imagesUrl.map(({ imageUrl }) => ( */}
                     <Image
                        src={imagesUrl}
                        alt="an image of your generated prompt"
                        width="512"
                        height="512"
                        className="w-full rounded-md"
                     />
                     {/* ))} */}
                  </section>
               </>
            )}
         </main>
      </>
   );
};

export default GeneratePage;